<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Github personal blog</title>
    <link>https://pcotret.github.io/</link>
    <description>Recent content on Github personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 17 Apr 2024 14:02:54 +0200</lastBuildDate>
    <atom:link href="https://pcotret.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Static page for conference deadlines</title>
      <link>https://pcotret.github.io/rsync-google/</link>
      <pubDate>Wed, 17 Apr 2024 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/rsync-google/</guid>
      <description>How to sync files between a Google Drive and a local directory: https://linovox.com/how-to-sync-google-drive-on-linux/&#xA;1 2 3 4 # From Google to local rclone sync google: /path/to/local/directory # From local to Google rclone sync /path/to/local/directory google: </description>
    </item>
    <item>
      <title>Quick start guide for SimulIDE as an Arduino simulator</title>
      <link>https://pcotret.github.io/simulide/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/simulide/</guid>
      <description>The idea behind this tutorial is to show how to install SimulIDE to run codes for an Arduino Uno board. Screenshots below were taken from a Windows machine. It will be the same thing for Unix-based systems (tested on Ubuntu). Some comments for the Mac port at the end (but it works!)&#xA;Downloading tools SimulIDE : Last Stable Version (0.4.15). For Linux, please prefer the Linux64 archive. Arduino. Legacy IDE (1.</description>
    </item>
    <item>
      <title>Suunto Ambit and Linux</title>
      <link>https://pcotret.github.io/suunto_ambit3/</link>
      <pubDate>Mon, 26 Dec 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/suunto_ambit3/</guid>
      <description>Just copying instructions from https://debian-facile.org/viewtopic.php?id=29025 in case this case falls down&#xA;Prerequisites :&#xA;Wine staging: https://wiki.winehq.org/Download Winetricks: https://wiki.winehq.org/Winetricks Openambit: https://github.com/openambitproject/openambit Watch with R/W for everyone:&#xA;1 2 sudo wget https://raw.githubusercontent.com/openambitproject/openambit/master/src/libambit/libambit.rules -O /etc/udev/rules.d/libambit.rules sudo udevadm control --reload-rules &amp;amp;&amp;amp; udevadm trigger 32-bit Wine prefix:&#xA;1 export WINEARCH=&amp;#34;win32&amp;#34; Install .NET 4.5.2:&#xA;1 winetricks dotnet452 Windows 7 mode:&#xA;1 winetricks win7 Disable SDL detection in Wine (otherwise, watch isn&amp;rsquo;t detected):&#xA;1 wine reg add &amp;#39;HKLM\System\CurrentControlSet\Services\WineBus&amp;#39; /v &amp;#39;Enable SDL&amp;#39; /t REG_DWORD /d 0 /f Download and install Suuntolink:</description>
    </item>
    <item>
      <title>M82 bibliography PDF</title>
      <link>https://pcotret.github.io/biblio-cyber/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/biblio-cyber/</guid>
      <description>The idea is to get a PDF of M82 bibliography instead of the Framapad.&#xA;https://github.com/pcotret/pad-biblio-cyber-pdf/releases/tag/2022-11-06</description>
    </item>
    <item>
      <title>Static page for conference deadlines</title>
      <link>https://pcotret.github.io/confs_static/</link>
      <pubDate>Thu, 13 Oct 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/confs_static/</guid>
      <description>Recently added a webpage to view conference deadlines: https://pcotret.github.io/deadlines-confs/ Based on sec-deadlines.github.io which is based on https://aideadlin.es/</description>
    </item>
    <item>
      <title>Godot reverse tools</title>
      <link>https://pcotret.github.io/godot-tools/</link>
      <pubDate>Sun, 12 Jun 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/godot-tools/</guid>
      <description> https://github.com/hhyyrylainen/GodotPckTool. GUI to play with Godot files. https://github.com/tehskai/godot-unpacker. Really useful as it&amp;rsquo;s able to unpack a Godot binary. https://github.com/bruvzg/gdsdecomp </description>
    </item>
    <item>
      <title>Installing Microsemi Libero 2021.3 on Ubuntu 20 LTS</title>
      <link>https://pcotret.github.io/microsemi_ubuntu/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/microsemi_ubuntu/</guid>
      <description>Mostly based on this great tutorial : https://bobbl.github.io/fpga/microsemi/2021/04/30/install-libero-update.html&#xA;Prerequisites 1 sudo apt install libxtst6:i386 libxrender1:i386 apt-file lsb xfonts-intl-asian xfonts-intl-chinese xfonts-intl-chinese-big xfonts-intl-japanese xfonts-intl-japanese-big ksh libxft2:i386 libgtk2.0-0:i386 libcanberra-gtk-module:i386 libqt5xdg-dev:i386 You may need other QT related packages in their i386 flavour.&#xA;Get License Create a directory for the license server (here I use ~/.local/share/microsemi/license)&#xA;1 mkdir --p /home/USERNAME/.local/share/microsemi/license Download the &amp;ldquo;Linux Daemon&amp;rdquo; from https://www.microsemi.com/product-directory/design-resources/1711-licensing#downloads to the license directory and extract it with:</description>
    </item>
    <item>
      <title>OSINT 101</title>
      <link>https://pcotret.github.io/osint101/</link>
      <pubDate>Tue, 11 Jan 2022 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/osint101/</guid>
      <description>OSINT 101 Some ressources to get into OSINT:&#xA;https://osintfr.com/en/how-to-begin-faq/ https://www.youtube.com/playlist?list=PLrFPX1Vfqk3ehZKSFeb9pVIHqxqrNW8Sy CTFs:&#xA;https://sourcing.games/ (several challenges, maybe the easiest to start with) https://investigator.cybersoc.wales/challenges https://ctf.cybersoc.wales/challenges </description>
    </item>
    <item>
      <title>HEXA OSINT CTF 2021</title>
      <link>https://pcotret.github.io/haxe_osint_2021/</link>
      <pubDate>Sun, 05 Dec 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/haxe_osint_2021/</guid>
      <description>https://hexactf.ctfd.io/&#xA;An OSINT-based CTF done by Sopra and &amp;ldquo;La Fabrique Défense&amp;rdquo; (French DoD entity)&#xA;Some writeups are here: https://github.com/pcotret/ctf-writeups/tree/master/hexa-2021</description>
    </item>
    <item>
      <title>Unlock your Brain OSINT CTF 2021</title>
      <link>https://pcotret.github.io/unlock2021/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/unlock2021/</guid>
      <description>Unlock Your Brain OSINT CTF https://github.com/pcotret/ctf-writeups/tree/master/uybhys-2021 This year, it was again an OSINT related CTF made by the OSINT-FR community</description>
    </item>
    <item>
      <title>RCTS CERT CTF</title>
      <link>https://pcotret.github.io/rcts-cert/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/rcts-cert/</guid>
      <description>RCTS CERT CTF writeups: https://github.com/pcotret/ctf-writeups/tree/master/rcts-cert-2021&#xA;https://defendingthesoc.ctf.cert.rcts.pt/</description>
    </item>
    <item>
      <title>TryHackMe free rooms</title>
      <link>https://pcotret.github.io/tryhackme/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/tryhackme/</guid>
      <description>Based on https://skerritt.blog/free-rooms/. Some rooms became private in the meantime&amp;hellip;&#xA;Level 1 - Intro OpenVPN https://tryhackme.com/room/openvpn Welcome https://tryhackme.com/jr/welcome Intro to Researching https://tryhackme.com/room/introtoresearch Crash Course Pentesting https://tryhackme.com/room/ccpentesting Introductory CTFs to get your feet wet Google Dorking https://tryhackme.com/room/googledorking OHsint https://tryhackme.com/room/ohsint Shodan.io https://tryhackme.com/room/shodan Level 2 - Tooling Tmux https://tryhackme.com/room/rptmux Web Scanning https://tryhackme.com/room/rpwebscanning Sublist3r https://tryhackme.com/room/rpsublist3r Metasploit https://tryhackme.com/room/rpmetasploit Hydra https://tryhackme.com/room/hydra Linux Privesc https://tryhackme.com/room/linuxprivesc Web Scanning https://tryhackme.com/room/rpwebscanning More introductory CTFs Vulnversity - https://tryhackme.com/room/vulnversity Blue - https://tryhackme.</description>
    </item>
    <item>
      <title>OWASP BWA VM settings</title>
      <link>https://pcotret.github.io/owasp-bwa/</link>
      <pubDate>Sun, 17 Jan 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/owasp-bwa/</guid>
      <description>Download the OWASP BWA VM: https://www.vulnhub.com/entry/owasp-broken-web-applications-project-12,46/&#xA;Network settings VM startup Just start the VM. After a few seconds, it will display its IP address. No need to login for the moment.&#xA;Just access the IP address in your browser and you&amp;rsquo;re ready to go!</description>
    </item>
    <item>
      <title>Brixel CTF</title>
      <link>https://pcotret.github.io/brixel-ctf/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/brixel-ctf/</guid>
      <description>Brixel CTF writeups: https://github.com/pcotret/ctf-writeups/tree/master/brixelctf-2020&#xA;It was quite nice with challenge in several categories.&#xA;https://ctf.brixel.space/</description>
    </item>
    <item>
      <title>Ice CTF</title>
      <link>https://pcotret.github.io/ice-ctf/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/ice-ctf/</guid>
      <description>IceCTF writeups: https://github.com/pcotret/ctf-writeups/tree/master/icectf-2020&#xA;https://icec.tf/</description>
    </item>
    <item>
      <title>Lockdown setup - Working with an IPEVO document camera</title>
      <link>https://pcotret.github.io/document-camera/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/document-camera/</guid>
      <description>As most of us, we&amp;rsquo;re working from home for some time. Here is a quick start guide for the IPEVO V4K document camera.&#xA;Installation Hardware The camera itself is a plug-and-play device: it&amp;rsquo;s recognized as a camera. Two buttons on it to enable/disable the autofocus and adjust the exposure.&#xA;Software Go to https://www.ipevo.com/software/visualizer#download&#xA;As you can see, the IPEVO visualizer is supported by several platforms:&#xA;In the following parts, we&amp;rsquo;ll try to work with the Linux binary and the Chrome plugin</description>
    </item>
    <item>
      <title>Building Wireshark from source</title>
      <link>https://pcotret.github.io/wireshark_build/</link>
      <pubDate>Sun, 20 Sep 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/wireshark_build/</guid>
      <description>Download and build 1 2 3 4 5 6 7 8 git clone https://gitlab.com/wireshark/wireshark sudo wireshark/tools/./debian-setup.sh --install-qt5-deps (--install-optional) cd wireshark mkdir build cd build cmake .. -DUSE_qt6=OFF make -j$(nproc) sudo make install </description>
    </item>
    <item>
      <title>Activate Coresight components in a Yocto environment for the Zedboard</title>
      <link>https://pcotret.github.io/coresight-zedboard/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/coresight-zedboard/</guid>
      <description>Activate Coresight components - Software side - Method #1 Generate a core-image-minimal Just follow https://pcotret.github.io/yocto-zedboard-101/. When booting this image:&#xA;1 2 3 4 5 6 7 Poky (Yocto Project Reference Distro) 3.0.3 zedboard-zynq7 /dev/ttyPS0 zedboard-zynq7 login: root root@zedboard-zynq7:~# ls /sys/bus/ amba container event_source i2c media nvmem scsi soc usb clockevents cpu gpio iio mmc pci sdio spi virtio clocksource edac hid mdio_bus mmc_rpmb platform serio ulpi workqueue No Coresight components &amp;#x1f622; ​</description>
    </item>
    <item>
      <title>Aircrack 101 - How to get the password of a WEP/WPA2 session captured in Wireshark</title>
      <link>https://pcotret.github.io/aircrack-101/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/aircrack-101/</guid>
      <description>Prerequisites sudo apt install aircrack-ng Some wordlists/dictionaries. Kali Linux has already some of them. WiFi handshakes 101 Introduction from @evilsocket&amp;rsquo;s Pwnagotchi: https://pwnagotchi.ai/intro/#wifi-handshakes-101&#xA;Dictionary-based attack In order to test a PCAP with a given dictionary:&#xA;1 aircrack-ng -w &amp;lt;wordlist&amp;gt; &amp;lt;wireshark_file&amp;gt; You have several dictionaries and sample PCAPs extracted from a Kali distro here: https://github.com/pcotret/aircrack-101-material&#xA;One of them should work with a short dictionary. Find it &amp;#x1f609;&#xA;Wireshark captures Lots of sample captures are available of Wireshark Gitlab: https://gitlab.</description>
    </item>
    <item>
      <title>Buffer overflow on ARM architecture</title>
      <link>https://pcotret.github.io/buffer-overflow-raspberrypi/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/buffer-overflow-raspberrypi/</guid>
      <description>Prerequisites A RaspberryPi and a distro. For this tutorial, I had an up-to-date Raspbian Stretch Lite with LXDE. GCC and GDB. ARM registers and stack TODO&#xA;An example of buffer overflow Initial state We have a binary without its source code but compiled with debug information. We know how to use it: ./prog2 PASS where PASS is a 4-character string. We would like to know if there&amp;rsquo;s interesting stuff or even dead code in it.</description>
    </item>
    <item>
      <title>Comment faire des PCB avec des produits basiques</title>
      <link>https://pcotret.github.io/pcb-maison/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/pcb-maison/</guid>
      <description>Update 03/2018 : autre technique dans le labo d&amp;rsquo;Heliox (propre aussi !) https://www.youtube.com/watch?v=8joLK039fjk&#xA;De bas en haut :&#xA;méthode de l&amp;rsquo;imprimante laser mais trop chauffé méthode de l&amp;rsquo;imprimante laser mais mal décollé méthode de l&amp;rsquo;imprimante laser repassé au marqueur indélébile (meilleur résultat pour application &amp;ldquo;industrielle&amp;rdquo;) masque réalisé au typex, pas terrible car le blanco se décolle pendant le bain d&amp;rsquo;acide. Je testerai avec du verni à ongle pour voir&amp;hellip; masque réalisé au marqueur indélébile Méthode de l&amp;rsquo;imprimante laser : on imprime sur du papier le typon qu&amp;rsquo;on souhaite réaliser.</description>
    </item>
    <item>
      <title>Image processing</title>
      <link>https://pcotret.github.io/image_scripts/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/image_scripts/</guid>
      <description>Convert an SVG to PNG in commande line using Inkscape (on Windows) Change export-height if you want a bigger image:&#xA;1 2 3 4 5 6 7 8 9 10 11 @echo off for %%f in (%*) do ( echo %%~f &amp;#34;C:\Program Files\Inkscape\inkscape.exe&amp;#34; ^ -z ^ --export-background-opacity=0 ^ --export-height=48 ^ --export-png=&amp;#34;%%~dpnf.png&amp;#34; ^ --file=&amp;#34;%%~f&amp;#34; ) Resize an image with Inkscape 1 for %%f in (*.png) do convert.exe %%f -resize 384x384 -background black -gravity center -extent 384x384 %%f Convert a Dia diagram in EPS then PDF 1 2 3 4 5 6 7 #!</description>
    </item>
    <item>
      <title>Implementation settings for (very) simple Vivado projects</title>
      <link>https://pcotret.github.io/implementation_test/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/implementation_test/</guid>
      <description>https://support.xilinx.com/s/article/58992?language=en_US&#xA;[Place 30-415] IO Placement failed due to over utilization&#xA;Project Manager =&amp;gt; Settings =&amp;gt; Synthesis =&amp;gt; More options. Add this flag:&#xA;1 -mode out_of_context </description>
    </item>
    <item>
      <title>Installing a Xilinx FPGA environment for an Ubuntu-based machine</title>
      <link>https://pcotret.github.io/fpga-env-101/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/fpga-env-101/</guid>
      <description>Installing Vivado Vivado Design Suite - HLx Editions - 2019.2 for the latest version: https://www.xilinx.com/support/download.html Tutorial available here: : https://www.dropbox.com/s/sgxhb08tcwuj9ko/Download_%26_Install_VIVADO_On_Ubuntu_July_3.pdf?dl=0 On recent Ubuntu versions, please install libtinfo and libncurses or you may get stuck in the final setup step: https://support.xilinx.com/s/question/0D52E00006iHjbcSAC/vivado-20211-installation-hangs-at-generating-installed-device-list?language=en_US License Infos available in another note. However, some families don&amp;rsquo;t need a license file &amp;#x1f609; Pre-configuration Before executing Vivado, a few things to be aware of:&#xA;Add this line in your $HOME/.</description>
    </item>
    <item>
      <title>Installing Lattice iCEcube2 FPGA tools on Ubuntu</title>
      <link>https://pcotret.github.io/lattice-ubuntu/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/lattice-ubuntu/</guid>
      <description>Lattice iCEcube2 has not been updated for a while&amp;hellip;&#xA;Installing an old libpng package 1 2 wget http://security.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1.1_i386.deb sudo dpkg -i libpng12-0_1.2.54-1ubuntu1.1_i386.deb Going through the interface issue Lattice iCEcube2 license takes into account the MAC address of the computer. In order to work, the interface must be labeled as eth0 as stated on the TinyFPGA forum (don&amp;rsquo;t ask me why&amp;hellip;)&#xA;1 2 $ sudo ip link add eth0 type dummy $ sudo ip link set eth0 address 10:65:30:ee:48:9a Now, iCEcube2 should work!</description>
    </item>
    <item>
      <title>LateX tips</title>
      <link>https://pcotret.github.io/latex_tips/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/latex_tips/</guid>
      <description>Generating random numbers in LateX The following code will generate a random number within a range for each compilation&#xA;1 2 3 4 5 \pgfmathsetseed{\number\pdfrandomseed} \newcommand{\thecmd}[2]{ \pgfmathsetmacro{\thenum}{int(random(#1,#2))} \thenum } Using ttfamily with bfseries in a listing Default font doesn&amp;rsquo;t implement bold style:&#xA;1 2 3 4 \renewcommand{\ttdefault}{pcr} \begin{lstlisting}[basicstyle=\ttfamily\bfseries] y:=2 \end{lstlisting} Makefile to compile a LateX project 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 ## Here is a simple Makefile for a basic LaTeX flow with a bibliography ## make help: ## print this menu ## make all: ## compile the stuff ## make clean: ## remove temporary files ## make clean_pdf: ## remove the output PDF file ## make clean_all: ## remove EVERYTHING # Variables FILENAME=mainfile BIBNAME=mainfile help: @grep -e &amp;#34;^##&amp;#34; Makefile; all: pdflatex ${FILENAME}.</description>
    </item>
    <item>
      <title>Marp to PDF</title>
      <link>https://pcotret.github.io/marp-to-pdf/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/marp-to-pdf/</guid>
      <description>Here is a way to convert Marp slides in PDF with emojis:&#xA;1 npx @marp-team/marp-cli main.md -o output.pdf --allow-local-files https://github.com/marp-team/marp-cli nodejs must be installed </description>
    </item>
    <item>
      <title>Memory alignment</title>
      <link>https://pcotret.github.io/memory-alignment/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/memory-alignment/</guid>
      <description>This note was inspired by a work of Samuele Giraudo (LIGM, Université Paris-Est Marne-la-Vallée)&#xA;http://igm.univ-mlv.fr/~giraudo/Enseignements/&#xA;Memory alignment https://en.wikipedia.org/wiki/Data_structure_alignment&#xA;Memory alignment of a given data is the way this data is organized in the memory. For instance, an array of n elements of type T is organized as a continuous array of sizeof(T) * n bytes.&#xA;How does memory alignment work for variables of a structured type? Let&amp;rsquo;s find out &amp;#x1f60a;</description>
    </item>
    <item>
      <title>My first topology</title>
      <link>https://pcotret.github.io/first_topology/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/first_topology/</guid>
      <description>Mainly based on an official tutorial (link).&#xA;A Google Drive with several Cisco IOS: https://drive.google.com/drive/folders/102jxZ9ECpe6ZFtXYdK_81iEVuuFoGOGR.&#xA;In this tutorial, the c7200 is used. You may not have the same interfaces in another case.&#xA;Topology creation Take two c7200 routers and add them to the schematic by a &amp;ldquo;drag and drop&amp;rdquo;.&#xA;We can see our two routers:&#xA;Use the link icon in order to&amp;hellip; &amp;hellip;link them. In this case, we connect the FastEthernet0/0 interfaces of the routers.</description>
    </item>
    <item>
      <title>OrangePi4SDR</title>
      <link>https://pcotret.github.io/orangepi4sdr/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/orangepi4sdr/</guid>
      <description>The goal was to get a single-board computer able to execute Gnuradio tools quite smoothly with various SDR devices (USB dongles, HackRF, USRP development boards). Unfortunately, the RaspberryPi family (both PiB+ and Pi2) did not met such requirements due to a lack of throughput in the USB controller. This tutorial introduces another solution based on a Chinese alternative called OrangePi [1]. For the operating system, Debian Jessie (8.2 version) is used: https://www.</description>
    </item>
    <item>
      <title>Register windows in SPARC</title>
      <link>https://pcotret.github.io/sparc_window_registers/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/sparc_window_registers/</guid>
      <description>128 registers available in SPARC. Each window is divided in 3 areas: 8 input registers (i0-i7) 8 local registers (l0-l7) 8 output registers (o0-07) 1 2 3 4 5 6 7 input // Function F1 local output&#x9;input // Save instruction (F2 called in F1) local output&#x9;input // Save instruction (F3 called in F2) local output As you can see, each time a function is called in another, the registers window &amp;ldquo;slides&amp;rdquo;: by the way, output registers of $F_n$ are equal to input registers of $F_{n+1}$.</description>
    </item>
    <item>
      <title>Running Modelsim on a 64-bit Ubuntu</title>
      <link>https://pcotret.github.io/modelsim-ubuntu/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/modelsim-ubuntu/</guid>
      <description>Install Modelsim on a 64-bit (x)Ubuntu 1 2 wget http://download.altera.com/akdlm/software/acdsinst/13.1/162/ib_installers/ModelSimSetup-13.1.0.162.run chmod +x ModelSimSetup-13.1.0.162.run However, the free version of Modelsim Altera Edition is 32-bit only. We need to install some dependencies:&#xA;1 2 3 4 sudo dpkg --add-architecture i386 sudo apt-get update sudo apt-get install build-essential sudo apt-get install gcc-multilib g++-multilib lib32z1 lib32stdc++6 lib32gcc1 expat:i386 fontconfig:i386 libfreetype6:i386 libexpat1:i386 libc6:i386 libgtk-3-0:i386 libcanberra0:i386 libpng16-16:i386 libice6:i386 libsm6:i386 libncurses5:i386 zlib1g:i386 libx11-6:i386 libxau6:i386 libxdmcp6:i386 libxext6:i386 libxft2:i386 libxrender1:i386 libxt6:i386 libxtst6:i386 Next, we need to build a free version of FreeType:</description>
    </item>
    <item>
      <title>Talks</title>
      <link>https://pcotret.github.io/talks/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/talks/</guid>
      <description>DevFest Bout du Monde - 28/02/2020 How to describe hardware code in Python down to the processor. Quick note about the license mess in the embedded world (in &amp;#x1f1eb;&amp;#x1f1f7;). Con website and slides.&#xA;Toulouse Hacking Convention - 09/03/2018 Results of a research project (link). Con website and slides.</description>
    </item>
    <item>
      <title>Xilinx settings in `~/.bashrc`</title>
      <link>https://pcotret.github.io/xilinx_bashrc/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/xilinx_bashrc/</guid>
      <description>Just because I&amp;rsquo;m too lazy to rewrite the few lines needed to get Vivado running.&#xA;Requirements Xilinx tools are installed in /opt/Xilinx You have write rights in this repository. Otherwise, just run a chown -R on /opt/Xilinx For this note, I assume you have the 2018.2 version installed on a 64-bit OS. Your license file is /opt/Xilinx/Xilinx.lic These lines have to be added at the end of your ~/.bashrc file</description>
    </item>
    <item>
      <title>Yocto on the Zedboard 101</title>
      <link>https://pcotret.github.io/yocto-zedboard-101/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/yocto-zedboard-101/</guid>
      <description>1. Introduction Yocto provides tools and metadata for creating custom embedded systems with following main features :&#xA;Images are tailored to specific hardware and use cases But metadata is generally arch-independent Unlike a distro, kitchen sink is not included (we know what we need in advance) Other keywords and their meanings are explained here:&#xA;An image is a collection of baked recipes (packages) A &amp;lsquo;recipe&amp;rsquo; is a set of instructions for building packages Where to get the source and which patches to apply Dependencies (on libraries or other recipes, for example) Config/compile options, install customization A layer is a logical collection of recipes representing the core, a board support package (BSP), or an application stack 1.</description>
    </item>
    <item>
      <title>About me</title>
      <link>https://pcotret.github.io/about/</link>
      <pubDate>Fri, 02 Aug 2019 11:04:49 +0800</pubDate>
      <guid>https://pcotret.github.io/about/</guid>
      <description>Hi, I&amp;rsquo;m Pascal! I&amp;rsquo;m working at ENSTA Bretagne in the embedded systems security field. This Github website is mainly a collection of articles and tech notes. Things around security but also others things!&#xA;Hope you&amp;rsquo;ll find something of interest &amp;#x1f609;&#xA;For research purposes, please visit my academic webpage: https://pcotret.gitlab.io</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tech notes / Embedded on Github personal blog</title>
    <link>https://pcotret.github.io/categories/tech-embedded/</link>
    <description>Recent content in Tech notes / Embedded on Github personal blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://pcotret.github.io/categories/tech-embedded/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Quick start guide for SimulIDE as an Arduino simulator</title>
      <link>https://pcotret.github.io/simulide/</link>
      <pubDate>Sun, 22 Jan 2023 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/simulide/</guid>
      <description>The idea behind this tutorial is to show how to install SimulIDE to run codes for an Arduino Uno board. Screenshots below were taken from a Windows machine. It will be the same thing for Unix-based systems (tested on Ubuntu). Some comments for the Mac port at the end (but it works!)&#xA;Downloading tools SimulIDE : Last Stable Version (0.4.15). For Linux, please prefer the Linux64 archive. Arduino. Legacy IDE (1.</description>
    </item>
    <item>
      <title>Activate Coresight components in a Yocto environment for the Zedboard</title>
      <link>https://pcotret.github.io/coresight-zedboard/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/coresight-zedboard/</guid>
      <description>Activate Coresight components - Software side - Method #1 Generate a core-image-minimal Just follow https://pcotret.github.io/yocto-zedboard-101/. When booting this image:&#xA;1 2 3 4 5 6 7 Poky (Yocto Project Reference Distro) 3.0.3 zedboard-zynq7 /dev/ttyPS0 zedboard-zynq7 login: root root@zedboard-zynq7:~# ls /sys/bus/ amba container event_source i2c media nvmem scsi soc usb clockevents cpu gpio iio mmc pci sdio spi virtio clocksource edac hid mdio_bus mmc_rpmb platform serio ulpi workqueue No Coresight components &amp;#x1f622; ​</description>
    </item>
    <item>
      <title>Buffer overflow on ARM architecture</title>
      <link>https://pcotret.github.io/buffer-overflow-raspberrypi/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/buffer-overflow-raspberrypi/</guid>
      <description>Prerequisites A RaspberryPi and a distro. For this tutorial, I had an up-to-date Raspbian Stretch Lite with LXDE. GCC and GDB. ARM registers and stack TODO&#xA;An example of buffer overflow Initial state We have a binary without its source code but compiled with debug information. We know how to use it: ./prog2 PASS where PASS is a 4-character string. We would like to know if there&amp;rsquo;s interesting stuff or even dead code in it.</description>
    </item>
    <item>
      <title>Memory alignment</title>
      <link>https://pcotret.github.io/memory-alignment/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/memory-alignment/</guid>
      <description>This note was inspired by a work of Samuele Giraudo (LIGM, Université Paris-Est Marne-la-Vallée)&#xA;http://igm.univ-mlv.fr/~giraudo/Enseignements/&#xA;Memory alignment https://en.wikipedia.org/wiki/Data_structure_alignment&#xA;Memory alignment of a given data is the way this data is organized in the memory. For instance, an array of n elements of type T is organized as a continuous array of sizeof(T) * n bytes.&#xA;How does memory alignment work for variables of a structured type? Let&amp;rsquo;s find out &amp;#x1f60a;</description>
    </item>
    <item>
      <title>OrangePi4SDR</title>
      <link>https://pcotret.github.io/orangepi4sdr/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/orangepi4sdr/</guid>
      <description>The goal was to get a single-board computer able to execute Gnuradio tools quite smoothly with various SDR devices (USB dongles, HackRF, USRP development boards). Unfortunately, the RaspberryPi family (both PiB+ and Pi2) did not met such requirements due to a lack of throughput in the USB controller. This tutorial introduces another solution based on a Chinese alternative called OrangePi [1]. For the operating system, Debian Jessie (8.2 version) is used: https://www.</description>
    </item>
    <item>
      <title>Register windows in SPARC</title>
      <link>https://pcotret.github.io/sparc_window_registers/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/sparc_window_registers/</guid>
      <description>128 registers available in SPARC. Each window is divided in 3 areas: 8 input registers (i0-i7) 8 local registers (l0-l7) 8 output registers (o0-07) 1 2 3 4 5 6 7 input // Function F1 local output&#x9;input // Save instruction (F2 called in F1) local output&#x9;input // Save instruction (F3 called in F2) local output As you can see, each time a function is called in another, the registers window &amp;ldquo;slides&amp;rdquo;: by the way, output registers of $F_n$ are equal to input registers of $F_{n+1}$.</description>
    </item>
    <item>
      <title>Yocto on the Zedboard 101</title>
      <link>https://pcotret.github.io/yocto-zedboard-101/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      <guid>https://pcotret.github.io/yocto-zedboard-101/</guid>
      <description>1. Introduction Yocto provides tools and metadata for creating custom embedded systems with following main features :&#xA;Images are tailored to specific hardware and use cases But metadata is generally arch-independent Unlike a distro, kitchen sink is not included (we know what we need in advance) Other keywords and their meanings are explained here:&#xA;An image is a collection of baked recipes (packages) A &amp;lsquo;recipe&amp;rsquo; is a set of instructions for building packages Where to get the source and which patches to apply Dependencies (on libraries or other recipes, for example) Config/compile options, install customization A layer is a logical collection of recipes representing the core, a board support package (BSP), or an application stack 1.</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Pascal Cotret @ ENSTA Bretagne</title>
    <link>https://pcotret.github.io/categories/articles/</link>
    <description>Recent content in Articles on Pascal Cotret @ ENSTA Bretagne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    
	<atom:link href="https://pcotret.github.io/categories/articles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Arduino Due vs. embedded C - ARM reversing</title>
      <link>https://pcotret.github.io/arduino_due_reverse/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://pcotret.github.io/arduino_due_reverse/</guid>
      <description>arduino-cli: Command Line Interface for Arduino ARM cross compiler: sudo apt install gcc-arm-none-eabi  Sample program We want to create the most simple program which goal is to light on the built-in LED, located at port PB27 on the Arduino Due.
Arduino 1 2 3 4 5 6 7 8  void setup() { pinMode(LED_BUILTIN, OUTPUT); } void loop() { digitalWrite(LED_BUILTIN, HIGH); }   Embedded C 1 2 3 4 5 6 7  int main() { PIOB-&amp;gt;PIO_PER = 1&amp;lt;&amp;lt;27; /* Enable port PB27 */ PIOB-&amp;gt;PIO_OER = 1&amp;lt;&amp;lt;27; /* Configure PB27 as output */ PIOB-&amp;gt;PIO_ODSR = 0xFFFFFFFF; /* Write 1 in all PORTB ports */ return 0; }   Codes and compilation 1 2 3 4 5 6 7 8 9  $ ls -lR .</description>
    </item>
    
    <item>
      <title>Arduino vs. embedded C - AVR reversing</title>
      <link>https://pcotret.github.io/arduino_reverse/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0800</pubDate>
      
      <guid>https://pcotret.github.io/arduino_reverse/</guid>
      <description>As I was teaching some embedded C basics, I was asked what are some benefits of embedded C over the classic Arduino language for an Arduino-based board. This article tries to see what we can do by reversing a really simple program compiled with both methods for the Arduino Uno.
 Prerequisites  arduino-cli: Command Line Interface for Arduino AVR cross compiler: sudo apt install gcc-avr Optional: an Arduino simulator such as SimulIDE  Sample program We want to create the most simple program which goal is to light on the built-in LED, located at port 13 (or PORT PB5) on the Arduino Uno.</description>
    </item>
    
  </channel>
</rss>
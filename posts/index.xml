<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Pascal Cotret @ ENSTA Bretagne</title>
        <link>https://pcotret.github.io/posts/</link>
        <description>All Posts | Pascal Cotret @ ENSTA Bretagne</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 01 May 2020 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://pcotret.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Arduino vs. embedded C - AVR reversing</title>
    <link>https://pcotret.github.io/arduino_reverse/</link>
    <pubDate>Fri, 01 May 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/arduino_reverse/</guid>
    <description><![CDATA[As I was teaching some embedded C basics, I was asked what are some benefits of embedded C over the classic Arduino language for an Arduino-based board. This article tries to see what we can do by reversing a really simple program compiled with both methods for the Arduino Uno.
 Prerequisites  arduino-cli: Command Line Interface for Arduino AVR cross compiler: sudo apt install gcc-avr Optional: an Arduino simulator such as SimulIDE  Sample program We want to create the most simple program which goal is to light on the built-in LED, located at port 13 (or PORT PB5) on the Arduino Uno.]]></description>
</item><item>
    <title>Quick start guide for SimulIDE as an Arduino simulator</title>
    <link>https://pcotret.github.io/simulide/</link>
    <pubDate>Thu, 30 Apr 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/simulide/</guid>
    <description><![CDATA[The idea behind this tutorial is to show how to install SimulIDE to run codes for an Arduino Uno board. Screenshots below were taken from a Windows machine. It will be the same thing for Unix-based systems (tested on Ubuntu). Some comments for the Mac port at the end (but it works!)
 Downloading tools  SimulIDE : v0.3.12-SR8 for the latest version. Download the Lin64.tar.gz or the Win32.zip archive depending of your operating system.]]></description>
</item><item>
    <title>Aircrack 101 - How to get the password of a WEP/WPA2 session captured in Wireshark</title>
    <link>https://pcotret.github.io/aircrack-101/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/aircrack-101/</guid>
    <description><![CDATA[Prerequisites  sudo apt install aircrack-ng  Some wordlists/dictionaries. Kali Linux has already some of them.  WiFi handshakes 101 Introduction from @evilsocket&lsquo;s Pwnagotchi: https://pwnagotchi.ai/intro/#wifi-handshakes-101
Dictionary-based attack In order to test a PCAP with a given dictionary:
1  aircrack-ng -w &lt;wordlist&gt; &lt;wireshark_file&gt;   ]]></description>
</item><item>
    <title>Buffer overflow on ARM architecture</title>
    <link>https://pcotret.github.io/buffer-overflow-raspberrypi/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/buffer-overflow-raspberrypi/</guid>
    <description><![CDATA[Prerequisites  A RaspberryPi and a distro. For this tutorial, I had an up-to-date Raspbian Stretch Lite with LXDE. GCC and GDB.  ARM registers and stack TODO
An example of buffer overflow Initial state  We have a binary without its source code but compiled with debug information. We know how to use it: ./prog2 PASS where PASS is a 4-character string. We would like to know if there&rsquo;s interesting stuff or even dead code in it.]]></description>
</item><item>
    <title>Comment faire des PCB avec des produits basiques</title>
    <link>https://pcotret.github.io/pcb-maison/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/pcb-maison/</guid>
    <description><![CDATA[Update 03/2018 : autre technique dans le labo d&rsquo;Heliox (propre aussi !) https://www.youtube.com/watch?v=8joLK039fjk
De bas en haut :
 mÃ©thode de l&rsquo;imprimante laser mais trop chauffÃ© mÃ©thode de l&rsquo;imprimante laser mais mal dÃ©collÃ© mÃ©thode de l&rsquo;imprimante laser repassÃ© au marqueur indÃ©lÃ©bile (meilleur rÃ©sultat pour application &ldquo;industrielle&rdquo;) masque rÃ©alisÃ© au typex, pas terrible car le blanco se dÃ©colle pendant le bain d&rsquo;acide. Je testerai avec du verni Ã  ongle pour voir&hellip; masque rÃ©alisÃ© au marqueur indÃ©lÃ©bile  MÃ©thode de l&rsquo;imprimante laser : on imprime sur du papier le typon qu&rsquo;on souhaite rÃ©aliser.]]></description>
</item><item>
    <title>Image processing</title>
    <link>https://pcotret.github.io/image_scripts/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/image_scripts/</guid>
    <description><![CDATA[Convert an SVG to PNG in commande line using Inkscape (on Windows) Change export-height if you want a bigger image:
1 2 3 4 5 6 7 8 9 10 11  @echo off for %%f in (%*) do ( echo %%~f &#34;C:\Program Files\Inkscape\inkscape.exe&#34; ^  -z ^  --export-background-opacity=0 ^  --export-height=48 ^  --export-png=&#34;%%~dpnf.png&#34; ^  --file=&#34;%%~f&#34; )   Resize an image with Inkscape 1  for %%f in (*.]]></description>
</item><item>
    <title>Installing a Xilinx FPGA environment for an Ubuntu-based machine</title>
    <link>https://pcotret.github.io/fpga-env-101/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/fpga-env-101/</guid>
    <description><![CDATA[Installing Vivado  Vivado Design Suite - HLx Editions - 2019.2 for the latest version: https://www.xilinx.com/support/download.html Tutorial available here: : https://www.dropbox.com/s/sgxhb08tcwuj9ko/Download_%26_Install_VIVADO_On_Ubuntu_July_3.pdf?dl=0  License  Infos available in another note. However, some families don&rsquo;t need a license file ðŸ˜‰  Pre-configuration Before executing Vivado, a few things to be aware of:
  Add this line in your $HOME/.bashrc (amongst other things, this script add binaries to PATH) :
1  source /opt/Xilinx/Vivado/2018.]]></description>
</item><item>
    <title>Installing Lattice iCEcube2 FPGA tools on Ubuntu</title>
    <link>https://pcotret.github.io/lattice-ubuntu/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/lattice-ubuntu/</guid>
    <description><![CDATA[Lattice iCEcube2 has not been updated for a while&hellip;
Installing an old libpng package 1 2  wget http://security.ubuntu.com/ubuntu/pool/main/libp/libpng/libpng12-0_1.2.54-1ubuntu1.1_i386.deb sudo dpkg -i libpng12-0_1.2.54-1ubuntu1.1_i386.deb   Going through the interface issue Lattice iCEcube2 license takes into account the MAC address of the computer. In order to work, the interface must be labeled as eth0 as stated on the TinyFPGA forum (don&rsquo;t ask me why&hellip;)
1 2  $ sudo ip link add eth0 type dummy $ sudo ip link set eth0 address 10:65:30:ee:48:9a   Now, iCEcube2 should work!]]></description>
</item><item>
    <title>LateX tips</title>
    <link>https://pcotret.github.io/latex_tips/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/latex_tips/</guid>
    <description><![CDATA[Using ttfamily with bfseries in a listing Default font doesn&rsquo;t implement bold style:
1 2 3 4  \renewcommand{\ttdefault}{pcr} \begin{lstlisting}[basicstyle=\ttfamily\bfseries] y:=2 \end{lstlisting}   Makefile to compile a LateX project 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  ## Here is a simple Makefile for a basic LaTeX flow with a bibliography ## make help: ## print this menu ## make all: ## compile the stuff ## make clean: ## remove temporary files ## make clean_pdf: ## remove the output PDF file ## make clean_all: ## remove EVERYTHING # Variables FILENAME=mainfile BIBNAME=mainfile help: @grep -e &#34;^##&#34; Makefile; all: pdflatex ${FILENAME}.]]></description>
</item><item>
    <title>Marp to PDF</title>
    <link>https://pcotret.github.io/marp-to-pdf/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/marp-to-pdf/</guid>
    <description><![CDATA[Here is a way to convert Marp slides in PDF with emojis:
1  npx @marp-team/marp-cli main.md -o output.pdf --allow-local-files    https://github.com/marp-team/marp-cli nodejs must be installed  ]]></description>
</item></channel>
</rss>

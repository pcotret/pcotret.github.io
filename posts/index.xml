<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - Pascal Cotret @ ENSTA Bretagne</title>
        <link>https://pcotret.github.io/posts/</link>
        <description>All Posts | Pascal Cotret @ ENSTA Bretagne</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 03 Jan 2021 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://pcotret.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Brixel CTF</title>
    <link>https://pcotret.github.io/brixel-ctf/</link>
    <pubDate>Sun, 03 Jan 2021 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/brixel-ctf/</guid>
    <description><![CDATA[Brixel CTF writeups: https://github.com/pcotret/ctf-writeups/tree/master/brixelctf-2020
It was quite nice with challenge in several categories.
https://ctf.brixel.space/]]></description>
</item><item>
    <title>Ice CTF</title>
    <link>https://pcotret.github.io/ice-ctf/</link>
    <pubDate>Fri, 01 Jan 2021 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/ice-ctf/</guid>
    <description><![CDATA[IceCTF writeups: https://github.com/pcotret/ctf-writeups/tree/master/icectf-2020
https://icec.tf/]]></description>
</item><item>
    <title>Lockdown setup - Working with an IPEVO document camera</title>
    <link>https://pcotret.github.io/document-camera/</link>
    <pubDate>Mon, 02 Nov 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/document-camera/</guid>
    <description><![CDATA[As most of us, we&rsquo;re working from home for some time. Here is a quick start guide for the IPEVO V4K document camera.
Installation Hardware The camera itself is a plug-and-play device: it&rsquo;s recognized as a camera. Two buttons on it to enable/disable the autofocus and adjust the exposure.
Software Go to https://www.ipevo.com/software/visualizer#download
As you can see, the IPEVO visualizer is supported by several platforms:
In the following parts, we&rsquo;ll try to work with the Linux binary and the Chrome plugin]]></description>
</item><item>
    <title>Building Wireshark from source</title>
    <link>https://pcotret.github.io/wireshark_build/</link>
    <pubDate>Sun, 20 Sep 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/wireshark_build/</guid>
    <description><![CDATA[Prerequisites for Ubuntu 20 1 2  sudo apt install libgcrypt20-dev libglib2.0-dev libc-ares-dev libssh-dev libpcap-dev \ libsystemd-dev qtbase5-dev qttools5-dev qtmultimedia5-dev   Download and build 1 2 3 4 5 6 7  git clone https://gitlab.com/wireshark/wireshark cd wireshark mkdir build cd build cmake .. make sudo make install   ]]></description>
</item><item>
    <title>Activate Coresight components in a Yocto environment for the Zedboard</title>
    <link>https://pcotret.github.io/coresight-zedboard/</link>
    <pubDate>Mon, 29 Jun 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/coresight-zedboard/</guid>
    <description><![CDATA[Activate Coresight components - Software side - Method #1 Generate a core-image-minimal Just follow https://pcotret.github.io/yocto-zedboard-101/. When booting this image:
1 2 3 4 5 6 7  Poky (Yocto Project Reference Distro) 3.0.3 zedboard-zynq7 /dev/ttyPS0 zedboard-zynq7 login: root root@zedboard-zynq7:~# ls /sys/bus/ amba container event_source i2c media nvmem scsi soc usb clockevents cpu gpio iio mmc pci sdio spi virtio clocksource edac hid mdio_bus mmc_rpmb platform serio ulpi workqueue   No Coresight components ðŸ˜¢ â€‹]]></description>
</item><item>
    <title>Arduino Due vs. embedded C - ARM reversing</title>
    <link>https://pcotret.github.io/arduino_due_reverse/</link>
    <pubDate>Sun, 03 May 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/arduino_due_reverse/</guid>
    <description><![CDATA[arduino-cli: Command Line Interface for Arduino ARM cross compiler: sudo apt install gcc-arm-none-eabi  Sample program We want to create the most simple program which goal is to light on the built-in LED, located at port PB27 on the Arduino Due.
Arduino 1 2 3 4 5 6 7 8  void setup() { pinMode(LED_BUILTIN, OUTPUT); } void loop() { digitalWrite(LED_BUILTIN, HIGH); }   Embedded C 1 2 3 4 5 6 7  int main() { PIOB-&gt;PIO_PER = 1&lt;&lt;27; /* Enable port PB27 */ PIOB-&gt;PIO_OER = 1&lt;&lt;27; /* Configure PB27 as output */ PIOB-&gt;PIO_ODSR = 0xFFFFFFFF; /* Write 1 in all PORTB ports */ return 0; }   Codes and compilation 1 2 3 4 5 6 7 8 9  $ ls -lR .]]></description>
</item><item>
    <title>Arduino vs. embedded C - AVR reversing</title>
    <link>https://pcotret.github.io/arduino_reverse/</link>
    <pubDate>Fri, 01 May 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/arduino_reverse/</guid>
    <description><![CDATA[As I was teaching some embedded C basics, I was asked what are some benefits of embedded C over the classic Arduino language for an Arduino-based board. This article tries to see what we can do by reversing a really simple program compiled with both methods for the Arduino Uno.
 Prerequisites  arduino-cli: Command Line Interface for Arduino AVR cross compiler: sudo apt install gcc-avr Optional: an Arduino simulator such as SimulIDE  Sample program We want to create the most simple program which goal is to light on the built-in LED, located at port 13 (or PORT PB5) on the Arduino Uno.]]></description>
</item><item>
    <title>Quick start guide for SimulIDE as an Arduino simulator</title>
    <link>https://pcotret.github.io/simulide/</link>
    <pubDate>Thu, 30 Apr 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/simulide/</guid>
    <description><![CDATA[The idea behind this tutorial is to show how to install SimulIDE to run codes for an Arduino Uno board. Screenshots below were taken from a Windows machine. It will be the same thing for Unix-based systems (tested on Ubuntu). Some comments for the Mac port at the end (but it works!)
 Downloading tools  SimulIDE : v0.3.12-SR8 for the latest version. Download the Lin64.tar.gz or the Win32.zip archive depending of your operating system.]]></description>
</item><item>
    <title>Aircrack 101 - How to get the password of a WEP/WPA2 session captured in Wireshark</title>
    <link>https://pcotret.github.io/aircrack-101/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/aircrack-101/</guid>
    <description><![CDATA[Prerequisites  sudo apt install aircrack-ng  Some wordlists/dictionaries. Kali Linux has already some of them.  WiFi handshakes 101 Introduction from @evilsocket&rsquo;s Pwnagotchi: https://pwnagotchi.ai/intro/#wifi-handshakes-101
Dictionary-based attack In order to test a PCAP with a given dictionary:
1  aircrack-ng -w &lt;wordlist&gt; &lt;wireshark_file&gt;   You have several dictionaries and sample PCAPs extracted from a Kali distro here: https://github.com/pcotret/aircrack-101-material
Wireshark captures https://wiki.wireshark.org/SampleCaptures One of them should work with a short dictionary.]]></description>
</item><item>
    <title>Buffer overflow on ARM architecture</title>
    <link>https://pcotret.github.io/buffer-overflow-raspberrypi/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/buffer-overflow-raspberrypi/</guid>
    <description><![CDATA[Prerequisites  A RaspberryPi and a distro. For this tutorial, I had an up-to-date Raspbian Stretch Lite with LXDE. GCC and GDB.  ARM registers and stack TODO
An example of buffer overflow Initial state  We have a binary without its source code but compiled with debug information. We know how to use it: ./prog2 PASS where PASS is a 4-character string. We would like to know if there&rsquo;s interesting stuff or even dead code in it.]]></description>
</item></channel>
</rss>

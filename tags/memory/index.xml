<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>memory - Tag - Github personal blog</title>
        <link>https://pcotret.github.io/tags/memory/</link>
        <description>memory - Tag - Github personal blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://pcotret.github.io/tags/memory/" rel="self" type="application/rss+xml" /><item>
    <title>Memory alignment</title>
    <link>https://pcotret.github.io/memory-alignment/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/memory-alignment/</guid>
    <description><![CDATA[This note was inspired by a work of Samuele Giraudo (LIGM, UniversitÃ© Paris-Est Marne-la-VallÃ©e)
http://igm.univ-mlv.fr/~giraudo/Enseignements/
Memory alignment https://en.wikipedia.org/wiki/Data_structure_alignment
Memory alignment of a given data is the way this data is organized in the memory. For instance, an array of n elements of type T is organized as a continuous array of sizeof(T) * n bytes.
How does memory alignment work for variables of a structured type? Let&rsquo;s find out ðŸ˜Š]]></description>
</item></channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory on Pascal Cotret @ ENSTA Bretagne</title>
    <link>https://pcotret.github.io/tags/memory/</link>
    <description>Recent content in memory on Pascal Cotret @ ENSTA Bretagne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 01 Jan 2020 00:00:00 +0800</lastBuildDate><atom:link href="https://pcotret.github.io/tags/memory/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Memory alignment</title>
      <link>https://pcotret.github.io/memory-alignment/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://pcotret.github.io/memory-alignment/</guid>
      <description>This note was inspired by a work of Samuele Giraudo (LIGM, UniversitÃ© Paris-Est Marne-la-VallÃ©e)
http://igm.univ-mlv.fr/~giraudo/Enseignements/
Memory alignment https://en.wikipedia.org/wiki/Data_structure_alignment
Memory alignment of a given data is the way this data is organized in the memory. For instance, an array of n elements of type T is organized as a continuous array of sizeof(T) * n bytes.
How does memory alignment work for variables of a structured type? Let&amp;rsquo;s find out ðŸ˜Š</description>
    </item>
    
  </channel>
</rss>

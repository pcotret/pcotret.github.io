<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>zedboard - Tag - Pascal Cotret @ ENSTA Bretagne</title>
        <link>https://pcotret.github.io/tags/zedboard/</link>
        <description>zedboard - Tag - Pascal Cotret @ ENSTA Bretagne</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Jun 2020 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://pcotret.github.io/tags/zedboard/" rel="self" type="application/rss+xml" /><item>
    <title>Activate Coresight components in a Yocto environment for the Zedboard</title>
    <link>https://pcotret.github.io/coresight-zedboard/</link>
    <pubDate>Mon, 29 Jun 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/coresight-zedboard/</guid>
    <description><![CDATA[Activate Coresight components - Software side - Method #1 Generate a core-image-minimal Just follow https://pcotret.github.io/yocto-zedboard-101/
Customize a linux-xlnx kernel uImage The idea is to create a custom kernel where the support of Coresight components is enabled. Unfortunately, we cannot customize the usual core-image-minimal image with Yocto tools. Fortunately, we can do it on a linux-xlnx image!
Activate Coresight components - Hardware side ðŸ˜¨]]></description>
</item><item>
    <title>Yocto on the Zedboard 101</title>
    <link>https://pcotret.github.io/yocto-zedboard-101/</link>
    <pubDate>Wed, 01 Jan 2020 00:00:00 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://pcotret.github.io/yocto-zedboard-101/</guid>
    <description><![CDATA[1. Introduction Yocto provides tools and metadata for creating custom embedded systems with following main features :
 Images are tailored to specific hardware and use cases But metadata is generally arch-independent Unlike a distro, kitchen sink is not included (we know what we need in advance)  Other keywords and their meanings are explained here:
 An image is a collection of baked recipes (packages) A &lsquo;recipe&rsquo; is a set of instructions for building packages  Where to get the source and which patches to apply Dependencies (on libraries or other recipes, for example) Config/compile options, install customization   A layer is a logical collection of recipes representing the core, a board support package (BSP), or an application stack  1.]]></description>
</item></channel>
</rss>

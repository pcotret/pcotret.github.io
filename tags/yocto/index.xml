<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yocto on Pascal Cotret @ ENSTA Bretagne</title>
    <link>https://pcotret.github.io/tags/yocto/</link>
    <description>Recent content in yocto on Pascal Cotret @ ENSTA Bretagne</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 29 Jun 2020 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="https://pcotret.github.io/tags/yocto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Activate Coresight components in a Yocto environment for the Zedboard</title>
      <link>https://pcotret.github.io/coresight-zedboard/</link>
      <pubDate>Mon, 29 Jun 2020 00:00:00 +0800</pubDate>
      
      <guid>https://pcotret.github.io/coresight-zedboard/</guid>
      <description>Activate Coresight components - Software side - Method #1 Generate a core-image-minimal Just follow https://pcotret.github.io/yocto-zedboard-101/. When booting this image:
1 2 3 4 5 6 7  Poky (Yocto Project Reference Distro) 3.0.3 zedboard-zynq7 /dev/ttyPS0 zedboard-zynq7 login: root root@zedboard-zynq7:~# ls /sys/bus/ amba container event_source i2c media nvmem scsi soc usb clockevents cpu gpio iio mmc pci sdio spi virtio clocksource edac hid mdio_bus mmc_rpmb platform serio ulpi workqueue   No Coresight components ðŸ˜¢ â€‹</description>
    </item>
    
    <item>
      <title>Yocto on the Zedboard 101</title>
      <link>https://pcotret.github.io/yocto-zedboard-101/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0800</pubDate>
      
      <guid>https://pcotret.github.io/yocto-zedboard-101/</guid>
      <description>1. Introduction Yocto provides tools and metadata for creating custom embedded systems with following main features :
 Images are tailored to specific hardware and use cases But metadata is generally arch-independent Unlike a distro, kitchen sink is not included (we know what we need in advance)  Other keywords and their meanings are explained here:
 An image is a collection of baked recipes (packages) A &amp;lsquo;recipe&amp;rsquo; is a set of instructions for building packages  Where to get the source and which patches to apply Dependencies (on libraries or other recipes, for example) Config/compile options, install customization   A layer is a logical collection of recipes representing the core, a board support package (BSP), or an application stack  1.</description>
    </item>
    
  </channel>
</rss>